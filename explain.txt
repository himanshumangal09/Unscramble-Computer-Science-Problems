TASK 0

import csv
with open('texts.csv', 'r') as f:
    reader = csv.reader(f)
    texts = list(reader)

with open('calls.csv', 'r') as f:
    reader = csv.reader(f)
    calls = list(reader)


so the above two codes have :
    space Complexity:O(n)
    time Complexity:O(n)
    
def task0(texts,calls):
    print("First record of texts," ,texts[0][0]," texts", texts[0][1] ,"at time ",texts[0][2])
    print("Last record of calls,",calls[-1][0],"calls", calls[-1][1],"at time ",calls[-1][2],"lasting", calls[-1][3],"seconds"

)
so this code have:
    space Complexity:O(1)
    time Complexity:O(1)

----------------------------------------------------------------------------------------------------------    
TASK 1


unique_numbers = []
for call  in calls:
    if call[0] not in unique_numbers:
        unique_numbers.append(call[0])
    if call[1] not in unique_numbers:
        unique_numbers.append(call[0])
for text in texts:
    if text[0] not in unique_numbers:
        unique_numbers.append(text[0])
    if text[1] not in unique_numbers:
        unique_numbers.append(text[0])


so the above two codes have :
    Best case space Complexity:O(n)
     Best case time Complexity:O(n)


    average space Complexity:O(n*m)
    average time Complexity:O(n*m)
    where m is len of unique_numbers

    worst case space Complexity:O(n*n)
    worst case time Complexity:O(n*n)

--------------------------------------------------------------------------------------------------------
Task 2

def longestcalls(calls):
    long_call = calls[0][3]
    incoming_num = calls[0][0]
    for call in calls:
        if int(call[3])>int(long_call):
            long_call = call[3]
            incoming_num = call[0]
    return incoming_num,long_call
#print("Last record of calls,",calls[-1][0],"calls", calls[-1][1],"at time ",calls[-1][2],"lasting", calls[-1][3],"seconds")
telephone_num = 0
duration = 0
telephone_num,duration = longestcalls(calls)
print(telephone_num," spent the longest time,",duration,"seconds, on the phone during September 2016.")



so the above two codes have :
    space Complexity:O(n)
    time Complexity:O(n)

 
------------------------------------------------------------------------------------------
TASK 3A

unique_numbers = []
for call  in calls:
    if call[0] not in unique_numbers:
        unique_numbers.append(call[0])
    if call[1] not in unique_numbers:
        unique_numbers.append(call[0])
for text in texts:
    if text[0] not in unique_numbers:
        unique_numbers.append(text[0])
    if text[1] not in unique_numbers:
        unique_numbers.append(text[0])

landline_numbers = []
for num in unique_numbers:
    if str(num)[0] == '(':
        landline_numbers.append(num)
        
mobile_numbers = []
for num in unique_numbers:
    if str(num)[0] == '7' or str(num)[0] == '8' or str(num)[0] == '9':
        mobile_numbers.append(num)

codes = []
for m_num in mobile_numbers:
    if m_num[:4] not in codes:
        codes.append(m_num[:4])
        
for l_num in landline_numbers:
    if l_num.split(")")[0][1:] not in codes:
        codes.append(l_num.split(")")[0][1:])
    

print("The numbers called by people in Bangalore have codes:",end="\t")
print(codes)

so the above codes have :
    Best case space Complexity:O(n)
     Best case time Complexity:O(n)


    average space Complexity:O(n*m)
    average time Complexity:O(n*m)
    where m is len of unique_numbers

    worst case space Complexity:O(n*n)
    worst case time Complexity:O(n*n)

------------------------------------------------------------------------------------------------
TASK 3B


fixed_lines_calls = []
for call in calls:
    if call[0][0] == "(" and call[1][0] == "(":
        fixed_lines_calls.append(call)
percentage = round(len(fixed_lines_calls) / len(calls) * 100 ,2)

print(percentage,"percent of calls from fixed lines in Bangalore are calls to other fixed lines in Bangalore.")


so the above code has :
    space Complexity:O(n)
    time Complexity:O(n)


---------------------------------------------------------------------------------------------------------
TASK 4

telemarketers = []
#makes outgoing calls
for call in calls:
    if call[0] not in telemarketers:
        telemarketers.append(call[0])
#never send or receive text
for text in texts:
    if text[0] in telemarketers:
        telemarketers.remove(text[0])
    if text[1] in telemarketers:
        telemarketers.remove(text[1])
#receive incoming calls
for call in calls:
    if call[1] in telemarketers:
        telemarketers.remove(call[1])
print("These numbers could be telemarketers:")
print(telemarketers)


so the above codes have :
    Best case space Complexity:O(n)
     Best case time Complexity:O(n)


    average space Complexity:O(n*m)
    average time Complexity:O(n*m)
    where m is len of unique_numbers

    worst case space Complexity:O(n*n)
    worst case time Complexity:O(n*n)





